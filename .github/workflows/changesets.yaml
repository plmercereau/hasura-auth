name: Release

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '!.changeset/**'
      - 'LICENSE'

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      hasChangesets: ${{ steps.changesets.outputs.hasChangesets }}
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7.14.2
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Create PR or Publish release
        id: changesets
        uses: changesets/action@v1
        with:
          version: pnpm run ci:version
          commit: 'chore: update versions'
          title: 'chore: update versions'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build Docker image
    needs: version
    if: needs.version.outputs.hasChangesets == 'false'
    timeout-minutes: 60
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build
        uses: docker/build-push-action@v3
        timeout-minutes: 60
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish:
    name: Publish Docker image and GitHub release
    needs: build
    timeout-minutes: 60
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Preprocess environment
        id: preprocess-environment
        run: echo "::set-output name=aws_account_id::${{ secrets.AWS_PRODUCTION_ACCOUNT_ID }}"
      - name: Determine tags
        id: tags
        run: |
          latestTag=v$(jq -r .version package.json)
          tags="type=sha\ntype=raw,value=latest,enable=true\n"
          if [ "steps.changesets.outputs.hasChangesets" = "false"]; then
            git tag $tag 2>/dev/null && (git push origin --tags ; tagged="OK" >> $GITHUB_OUTPUT) || true
            if [ -n "$tagged" ]; then
              tags="${tags}type=semver,pattern={{version}},value=$latestTag\n"
              tags="${tags}type=semver,pattern={{major}}.{{minor}},,value=$latestTag\n"
              tags="${tags}type=semver,pattern={{major}},value=$latestTag\n"
              echo "new=true" >> $GITHUB_OUTPUT
            fi
          fi
          # tags=$(echo -e "$tags")
          tags="${tags//'%'/'%25'}"
          tags="${tags//$'\n'/'%0A'}"
          tags="${tags//$'\r'/'%0D'}"
          echo "TAGS: $tags"
          echo "tags=$tags" >> $GITHUB_OUTPUT
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            nhost/hasura-auth
            ${{ steps.preprocess-environment.outputs.aws_account_id }}.dkr.ecr.eu-central-1.amazonaws.com/hasura-auth
          # generate Docker tags based on the following events/attributes
          tags: ${{ steps.tags.outputs.tags }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ steps.preprocess-environment.outputs.aws_account_id }}:role/github-actions-nhost-${{ github.event.repository.name }}
          aws-region: eu-central-1
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and publish to Docker Hub and AWS ECR
        uses: docker/build-push-action@v3
        timeout-minutes: 60
        with:
          # TODO: use cache https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md
          context: .
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
      - name: Create GitHub Release
        uses: taiki-e/create-gh-release-action@v1
        if: steps.tags.outputs.new == 'true'
        with:
          changelog: CHANGELOG.md
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: refs/tags/${{ needs.version.outputs.tag }}
      - name: Remove tag
        if: failure() && steps.tags.outputs.new == 'true'
        run: git push --delete origin ${{ steps.tags.outputs.new }}
